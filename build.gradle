apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

group = 'net.timelegend.mupdf'
version = '1.24.9.1'

buildscript {
	repositories {
		google()
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:8.1.1'
	}
}

allprojects {
	repositories {
		google()
		mavenCentral()
	}
}

android {
	compileSdkVersion 34

	defaultConfig {
        namespace 'net.timelegend.mupdf.fitz'
		minSdkVersion 21
		targetSdkVersion 34

		externalNativeBuild.ndkBuild.arguments '-j4'

		// Set ABI_FILTERS in your gradle.properties file
		if (project.hasProperty('ABI_FILTERS')) {
			ndk.abiFilters = []
			ndk.abiFilters.addAll(ABI_FILTERS.split(',').collect{it as String})
		}
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs 'libmupdf/platform/java/src'
		}
	}

	externalNativeBuild {
		ndkBuild.path 'libmupdf/platform/java/Android.mk'
	}
}

project.afterEvaluate {
	publishing {
		publications {
			release(MavenPublication) {
				artifactId 'fitz'
				artifact(bundleReleaseAar)

				pom {
					name = 'fitz'
					url = 'https://github.com/elementdavv/mupdf-android-fitz'
                    description = 'mupdf android adapter'
					licenses {
						license {
							name = 'GNU Affero General Public License'
							url = 'https://www.gnu.org/licenses/agpl-3.0.html'
						}
					}
                    developers {
                        developer {
                            id = 'elementdavv'
                            name = 'elementdavv'
                            email = 'elementdavv@hotmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git@github.com:elementdavv/mupdf-android-fitz'
                        developerConnection = 'scm:git@github.com:elementdavv/mupdf-android-fitz.git'
                        url = 'scm:git@github.com:elementdavv/mupdf-android-fitz.git'
                    }
				}
				pom.withXml {
					final dependenciesNode = asNode().appendNode('dependencies')
					configurations.implementation.allDependencies.each {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
	}
}
